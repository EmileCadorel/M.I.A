mod mia::syntax::visitor;

import std::io, std::conv, std::stream;
import std::fs, std::fs::_;
import std::collection::set, std::collection::vec;

import mia::utils::colors;
import mia::syntax::_;
import mia::syntax::tree::_;

/**
 * A syntax exception is the exception thrown when the syntax visitor does not succeed to read a sentence.
 * This can be due to many many things, for example limitations of the syntax visitor
 * For example, the first implementation won't accept any error in the sentence 
 * The message of the error, tries to be clear about the error, however
 */
class SyntaxError over Exception {
    pub let msg : [c32];
    
    pub self (msg : [c32]) with msg = msg {}
    
    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            self::super.toStream (alias stream);
        }
    }
}

/**
 * Transform a word into a lower case word, The syntax visitor does not take into account the majuscule (for the moment at least)
 * @example:
 * ===========
 * assert (toLower ("Ĉar") == "ĉar");
 * ===========
 */
def toLower (str : [c32])-> [c32] {
    import std::algorithm::iteration;

    str.map!{|x| => {
        if (x >= 'A'c32 && x <= 'Z'c32) {
            x - 'A'c32 + 'a'c32
        } else {
            match x {
                'Ĉ'c32 => {'ĉ'c32}
                'Ŝ'c32 => {'ŝ'c32}
                'Ĥ'c32 => {'ĥ'c32}
                'Ĵ'c32 => {'ĵ'c32}
                'Ĝ'c32 => {'Ĝ'c32}
                'Ŭ'c32 => {'ŭ'c32}
                _ => { x } 
            }
        }
    }} ()
}
   
/**
 * Load a resource file, and return the list of words cointained in the file
 * @throws: 
 *   - FsError, if the file of resource does not exists
 */
def loadResource (path : &Path)-> &HashSet![c32]
    throws &FsError
{
    let dmut words = HashSet!{[c32]}::new ();
    with dmut f = File::open (path) {
        loop {
            let w = f:.readUntil ("\n"s32);
            if (w.len == 0us) break {}
            __pragma!trusted ({
                words:.insert (w [0us .. $-1us].to![c32] ().toLower ());
            }); // OutOfArray is impossible, this would mean an error of the language itself
        }
    }
    words
}

enum
| COMA = ","s32
| QUOTE = "'"s32
| DQUOTE = "\""s32
| LPAR = "("s32
| RPAR = ")"s32
| HYPHEN = "-"s32
| SEMI_COLON = ";"s32
| COLON = ":"s32
| QUESTION = "?"s32
| EXLAM = "!"s32
| DOT = "."s32
| TDOT = "..."s32
| LONG_HYPHEN = "—"s32
 -> Punctuation;


/**
 * The syntax visitor is used to transform a sentence into a list of word, it
 * tries its best to apply a usage to every word, but does not care
 * about context This part can be seen as a syntax evaluation, the
 * semantic part is done later on the tree returned by the syntax visitor
 * @example: 
 * =============
 * =============
 */
pub class @final SyntaxVisitor {
   
    prv {
        let __E_WORDS__ : &HashSet!{[c32]};
        let __I_WORDS__ : &HashSet!{[c32]};
        let __N_WORDS__ : &HashSet!{[c32]};
        let __KI_WORDS__ : &HashSet!{[c32]};
        let __SPECIAL_ADVERBS__ : &HashSet!{[c32]};        
    }

    /**
     * Create a new syntax visitor instance
     * @params: 
     *   - the location of the resource files to load
     * @info: the name of the resource files is standard 
     */
    pub self (resource : &Path = Path::new ("."s32))        
        with __E_WORDS__ = loadResource (resource.push ("e-words.txt"s8)),
             __SPECIAL_ADVERBS__ = loadResource (resource.push ("special-adverbs.txt"s8)),
    __I_WORDS__ = loadResource (resource.push ("i-words.txt"s8)),
    __N_WORDS__ = loadResource (resource.push ("n-words.txt"s8)),
    __KI_WORDS__ = loadResource (resource.push ("ki-words.txt"s8))
        throws &FsError
    {}

    
    /**
     * Visit a esperanto sentence, and return the abstract syntax tree of the sentence
     * The goal of this first visit is to isolate the words of the sentence, and try to affect roles to the words
     * There is no context in this visit, the context will be used afterwards in the semantic analyses
     * Maybe that is not possible, and we will need some context (probabely), but for the moment we will try without
     * @info: a sentence generally ends with a dot, an interogation mark or an exlamation mark. If none of these is given, a dot is infered
     * @example: 
     * ===================
     * let dmut mia_syntax = SyntaxVisitor::new ();
     * let sentence = mia_syntax:.visitSentence ("kiel vi fartas?"s32);
     * println (sentence); 
     * ===================
     */
    pub def visitSentence (self, sentence : [c32])-> &Sentence
        throws &SyntaxError
    {
        let dmut lex = Lexer::new (sentence, tokens-> Punctuation::__members__);
        let list = self.toWordList (alias lex);
        println (list);
        // loop {
        //     let group = self.visitWordGroup (alias lex);
        //     match group {
        //         EmptyGroup () => break {}
        //         _ => println (group);
        //     }
        // }

        Sentence::new ()
    }    


    prv def toWordList (self, dmut lex : &Lexer)-> [&Word]
        throws &SyntaxError
    {
        let dmut res = Vec!{&Word}::new ();
        loop {
            let tok = lex:.next ();
            if (tok.isEof ()) break {}
            res:.push (self.characterizeWord (tok.str ()));
        }
        res []
    }

    prv def characterizeWord (self, tok : [c32], acc : bool = false, plural : bool = false) -> &Word
        throws &SyntaxError
    {
        match tok[$ - 1us] {
            'n' => {
                if plural || acc { throw SyntaxError::new (tok); }
                if tok in self.__N_WORDS__ {
                    return Conjunction::new (tok);
                } else {
                    return self.characterizeWord (tok [0us .. $ - 1us], acc-> true, plural-> false);
                }
            }
            'o' => {
                return Noun::new (tok, acc, plural);
            }
            'a' => {
                return Adjective::new (tok, acc, plural);
            }
            'e' => {
                if plural { throw SyntaxError::new (tok); }
                return Adverb::new (tok, acc);
            }
            'i' => {
                if plural { throw SyntaxError::new (tok); }
                if tok in self.__I_WORDS__ { return Noun::new (tok, acc, false); }
                if acc { throw SyntaxError::new (tok); }
                
                return Verb::new (tok);
            }
            's' => {
                return Verb::new (tok);
            }
            'j' => {
                if plural { throw SyntaxError::new (tok); } 
                return self.characterizeWord (tok, acc-> acc, plural-> true);
            }
            _ => {
                if plural || acc { throw SyntaxError::new (tok); }
                if tok in self.__KI_WORDS__ { return Conjunction::new (tok); }
                else { throw SyntaxError::new (tok); }
            }
        }
    } catch {
        err : &SyntaxError => throw err;
        x : _ => {
            println (x);
            throw SyntaxError::new ("");
        }
    }
    
    
    
    impl Streamable {
        
        pub over toStream (self, dmut stream : &StringStream) {
            stream:.write (typeof (self)::typeid, "()"s32);
        }        

    }
}
