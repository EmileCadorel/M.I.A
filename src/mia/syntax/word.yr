mod mia::syntax::word;
import std::io;
import mia::utils::colors;

/**
 * A word encode a content part of a file
 * It is used to identify part of a file as a token, keyword, identifier, etc.
 */
pub class @final Word {

    let _str : [c8];

    let _line : usize;

    let _col : usize;

    let _seek : usize;

    let _fileContent : [c8];

    let _lineSeek : usize;

    let _isEof : bool = false;

    /**
     * Create an empty word
     * @params: 
     *   - filename: the file in which we want an empty word
     */
    pub self eof () with
        _str = ""s8, _line = 0us, _col = 0us, _seek = 0us, _fileContent = ""s8, _lineSeek = 0us, _isEof = true
    {}

    /**
     * Create a word from a file 
     * @params: 
     *   - str: the content of the word
     *   - filename: the name of the file that contains the word
     *   - line: the location line of the word
     *   - col: the location column of the word
     *   - seek: the location cursor of the word (number of c8 preceding it)
     *   - lineSeek: the location cursor of the beginning of the line containing the word
     */
    pub self (str : [c8], fileContent : [c8], line : usize, col : usize, seek : usize, lineSeek : usize) with
        _str = str, _fileContent = fileContent, _line = line, _col = col, _seek = seek, _lineSeek = lineSeek
    {}

    /**
     * @returns: the content of the word
     */
    pub def str (self) -> [c8] {
        self._str
    }

    /**
     * @returns: the length of the content of the word
     */
    pub def len (self) -> usize {
        self._str.len 
    }

    /**
     * @returns: the location column of the word
     */
    pub def col (self) -> usize {
        self._col
    }

    /**
     * @returns: the location line of the word
     */
    pub def line (self) -> usize {
        self._line
    }

    /**
     * @returns: the content of the file containing the word
     */
    pub def fileContent (self) -> [c8] {
        self._fileContent
    }

    /**
     * @returns: the cursor position of the line containing the word
     */
    pub def lineSeek (self)-> usize {
        self._lineSeek
    }

    /**
     * @returns: true if the word is empty, (constructed with eof), false otherwise 
     */
    pub def isEof (self) -> bool {
        self._isEof
    }

    /**
     * @returns: true if the word is not empty, and its content is equals to o
     */
    pub def opEquals (self, o : [c8]) -> bool {
        if (self._isEof)
            false
        else 
            self._str == o
    }       
    
    impl std::io::Printable {

        pub over print (self)-> void {
            print (typeof (self)::typeid, "(", Colors::YELLOW, self._str, Colors::RESET, ",", self._line, ",", self._col, ")")
        }
    }
    
}
